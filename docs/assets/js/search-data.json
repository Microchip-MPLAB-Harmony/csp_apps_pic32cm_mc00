{"0": {
    "doc": "License",
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. | License and Sublicense Grant. (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products. (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) \"Third Party\" means Licensee's agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products. (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d). (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. | Licensee’s Obligations. (a) Licensee will ensure Third Party compliance with the terms of this Agreement. (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. | Confidentiality. (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. | Ownership of Proprietary Rights. (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. | General. (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. | . If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "AC PWM generation",
    "title": "AC PWM generation",
    "content": "This example application shows how to use the Analog Comparator Peripheral library to generate a 1KHz PWM waveform. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_wav_gen/readme.html#ac-pwm-generation",
    "relUrl": "/apps/ac/ac_wav_gen/readme.html#ac-pwm-generation"
  },"2": {
    "doc": "AC PWM generation",
    "title": "Description",
    "content": "The AC peripheral is configured to generate analog PWM waveform by comparing the sine wave generated from the DAC with the reference voltage selected as a VDD scaler. The duty cycle of the analog PWM is changed by pressing a switch which changes the value of the VDD scaler. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_wav_gen/readme.html#description",
    "relUrl": "/apps/ac/ac_wav_gen/readme.html#description"
  },"3": {
    "doc": "AC PWM generation",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/ac/ac_wav_gen/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_wav_gen/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/ac/ac_wav_gen/readme.html#downloading-and-building-the-application"
  },"4": {
    "doc": "AC PWM generation",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Use a jumper wire to connect pin PA04 “Pin A2 of the J803 connector” and PA02 “Pin DAC_VOUT on the DAC Header J700” | Use the Logic Analyzer/Oscilloscope and probe PA12 pin (Pin 11 of the EXT1 header) to observe the PWM output | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_wav_gen/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/ac/ac_wav_gen/readme.html#setting-up-the-hardware"
  },"5": {
    "doc": "AC PWM generation",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe the PWM waveform using the oscilloscope connected to the PWM output pin . | Press switch to change the duty cycle of PWM waveform | . Refer to the following table for pwm output and switch details: . | Board | PWM output pin | Switch |   | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | PA12 pin (Pin 11 of the EXT1 header) | SW0 |   | . |   |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_wav_gen/readme.html#running-the-application",
    "relUrl": "/apps/ac/ac_wav_gen/readme.html#running-the-application"
  },"6": {
    "doc": "AC PWM generation",
    "title": "AC PWM generation",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_wav_gen/readme.html",
    "relUrl": "/apps/ac/ac_wav_gen/readme.html"
  },"7": {
    "doc": "ADC DMA sleepwalking",
    "title": "ADC DMA sleepwalking",
    "content": "This application shows how to configure the ADC in a sleepwalking operation, where the input voltage is measured at a fixed interval, and then the device is woken from sleep after conversion of 16 samples. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_dmac_sleepwalking/readme.html#adc-dma-sleepwalking",
    "relUrl": "/apps/adc/adc_dmac_sleepwalking/readme.html#adc-dma-sleepwalking"
  },"8": {
    "doc": "ADC DMA sleepwalking",
    "title": "Description",
    "content": "This example application shows how to use the ADC peripheral library to perform sleepwalking and how the DMA wakes up the device after conversion of N samples. ADC conversion is triggered by RTC compare 0 event. On every trigger, input voltage is converted and the result is copied to an array in SRAM by the DMA channel. All these peripherals are operated while the CPU is in sleep. DMA generates interrupt after it transfers 16 results into the array in SRAM, which wakes the CPU. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_dmac_sleepwalking/readme.html#description",
    "relUrl": "/apps/adc/adc_dmac_sleepwalking/readme.html#description"
  },"9": {
    "doc": "ADC DMA sleepwalking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/adc/adc_dmac_sleepwalking/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_dmac_sleepwalking/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/adc/adc_dmac_sleepwalking/readme.html#downloading-and-building-the-application"
  },"10": {
    "doc": "ADC DMA sleepwalking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect a voltage below the selected ADC reference voltage (VDDANA) to pin 4 (PB08 – ADC0_AIN2) of EXT1 connector | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_dmac_sleepwalking/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/adc/adc_dmac_sleepwalking/readme.html#setting-up-the-hardware"
  },"11": {
    "doc": "ADC DMA sleepwalking",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | CPU wakes up after every 16 transfers of ADC result and updates the console as shown below: . | Failure is indicated by turning ON the user LED (i.e. application failed if the LED is turned ON) | . Refer to the table below for details of LED: . | Board | LED name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_dmac_sleepwalking/readme.html#running-the-application",
    "relUrl": "/apps/adc/adc_dmac_sleepwalking/readme.html#running-the-application"
  },"12": {
    "doc": "ADC DMA sleepwalking",
    "title": "ADC DMA sleepwalking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_dmac_sleepwalking/readme.html",
    "relUrl": "/apps/adc/adc_dmac_sleepwalking/readme.html"
  },"13": {
    "doc": "ADC Sample",
    "title": "ADC Sample",
    "content": "This example application shows how to sample an analog input using the ADC and displays the converted samples on a serial terminal. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_sample/readme.html#adc-sample",
    "relUrl": "/apps/adc/adc_sample/readme.html#adc-sample"
  },"14": {
    "doc": "ADC Sample",
    "title": "Description",
    "content": "In this application, DAC output is fed to an analog input for the ADC conversion. An analog input is converted by a software trigger and the converted value is displayed on the console. DAC output is changed by 0.1 V upon switch press. | Board | DAC output range | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | 0 V to 3.3 V | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_sample/readme.html#description",
    "relUrl": "/apps/adc/adc_sample/readme.html#description"
  },"15": {
    "doc": "ADC Sample",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/adc/adc_sample/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_sample/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/adc/adc_sample/readme.html#downloading-and-building-the-application"
  },"16": {
    "doc": "ADC Sample",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Analog input (AIN2) is fed from the DAC output . | Analog input “AIN2” is mapped to Port Pin “PAB08” that is routed to “Pin 4 of the EXT1 header” | DAC output “DAC” is mapped to Port Pin “PA02” that is routed to “Pin 1 of the DAC J700 header” | Use a jumper wire to Connect “Pin 4 of the EXT1 header” to “Pin 1 of the DAC J700 header” | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_sample/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/adc/adc_sample/readme.html#setting-up-the-hardware"
  },"17": {
    "doc": "ADC Sample",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Press switch to change the DAC value | ADC input voltage changes by 0.1 V when the switch is pressed, from 0.0 V to 3.3 V | Refer to the table below for the switch details: . | Board | Switch name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | SW0 | . |   |   | . | Console displays the ADC count and the ADC input voltage in the console as shown below: . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_sample/readme.html#running-the-application",
    "relUrl": "/apps/adc/adc_sample/readme.html#running-the-application"
  },"18": {
    "doc": "ADC Sample",
    "title": "ADC Sample",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_sample/readme.html",
    "relUrl": "/apps/adc/adc_sample/readme.html"
  },"19": {
    "doc": "ADC window sleepwalking",
    "title": "ADC window sleepwalking",
    "content": "This application shows how to configure ADC in a sleepwalking operation, where input voltage is measured at a fixed interval, but device is not woken from sleep until the measured value is below a given threshold. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_window_sleepwalking/readme.html#adc-window-sleepwalking",
    "relUrl": "/apps/adc/adc_window_sleepwalking/readme.html#adc-window-sleepwalking"
  },"20": {
    "doc": "ADC window sleepwalking",
    "title": "Description",
    "content": "This example application shows how to use the ADC Peripheral library to perform sleepwalking. The ADC peripheral is configured to operate in window mode. The ADC conversion is triggered by RTC compare 0 event. On every trigger, window detection operation is performed in standby sleep. The window interrupt is generated when the input voltage falls below the window upper threshold and the CPU is woken up by this interrupt. ADC window upper threshold is configured as 1/4 th of the reference voltage. | Board | ADC window upper threshold | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | 0.825 V | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_window_sleepwalking/readme.html#description",
    "relUrl": "/apps/adc/adc_window_sleepwalking/readme.html#description"
  },"21": {
    "doc": "ADC window sleepwalking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/adc/adc_window_sleepwalking/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_window_sleepwalking/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/adc/adc_window_sleepwalking/readme.html#downloading-and-building-the-application"
  },"22": {
    "doc": "ADC window sleepwalking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect a voltage below the selected ADC reference voltage (VDDANA) to pin 4 (PB08 – ADC0_AIN2) of the EXT1 connector | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_window_sleepwalking/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/adc/adc_window_sleepwalking/readme.html#setting-up-the-hardware"
  },"23": {
    "doc": "ADC window sleepwalking",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Console displays ADC Window Detected when ADC input is lower than 1/4 th of the reference voltage (i.e below 0.825 V): . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_window_sleepwalking/readme.html#running-the-application",
    "relUrl": "/apps/adc/adc_window_sleepwalking/readme.html#running-the-application"
  },"24": {
    "doc": "ADC window sleepwalking",
    "title": "ADC window sleepwalking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/adc/adc_window_sleepwalking/readme.html",
    "relUrl": "/apps/adc/adc_window_sleepwalking/readme.html"
  },"25": {
    "doc": "CCL Manchester Encoder",
    "title": "CCL Manchester Encoder",
    "content": "This example application shows how to use the CCL peripheral library and generate a Manchester-encoded output. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ccl/manchester_encoder/readme.html#ccl-manchester-encoder",
    "relUrl": "/apps/ccl/manchester_encoder/readme.html#ccl-manchester-encoder"
  },"26": {
    "doc": "CCL Manchester Encoder",
    "title": "Description",
    "content": "This demonstrates a way to generate a Manchester-encoded output using a SPI port and the CCL. The SPI port is sending out a predefined buffer of data in a circular fashion. Data is sent out LSB first, with CCL_OUT being the Manchester-encoded output. Pins are configured such that a logic analyzer can be attached to see the input (MOSI and SCK) and the output (CCL_OUT) simultaneously. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ccl/manchester_encoder/readme.html#description",
    "relUrl": "/apps/ccl/manchester_encoder/readme.html#description"
  },"27": {
    "doc": "CCL Manchester Encoder",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/ccl/manchester_encoder/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ccl/manchester_encoder/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/ccl/manchester_encoder/readme.html#downloading-and-building-the-application"
  },"28": {
    "doc": "CCL Manchester Encoder",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Use jumper from PA17 (EXT1 pin 15) to PA09 (EXT2 pin 4). This routes SCK signal to CCL_IN[4] | Use jumper from PA16 (EXT2 pin 17) to PA10 (EXT2 pin 5). This routes MOSI signal to CCL_IN[5] | PA11 (EXT2 pin 6) has CCL output (CCL_OUT) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ccl/manchester_encoder/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/ccl/manchester_encoder/readme.html#setting-up-the-hardware"
  },"29": {
    "doc": "CCL Manchester Encoder",
    "title": "Running the Application",
    "content": ". | Connect a logic analyzer to MOSI pin | Connect a logic analyzer to SCK pin | Connect a logic analyzer to the Manchester-encoded output CCL_OUT pin | Refer to the following table for pin details: . | Board | MOSI pin | SCK pin | CCL_OUT pin | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | PA16 (EXT2 pin 17) | PA17 (EXT1 pin 15) | PA11 (EXT2 pin 6) | . |   |   |   |   | . | Build and Program the application using its IDE | Observe the output on logic analyzer, it should follow the truth table as shown in the following diagram: . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ccl/manchester_encoder/readme.html#running-the-application",
    "relUrl": "/apps/ccl/manchester_encoder/readme.html#running-the-application"
  },"30": {
    "doc": "CCL Manchester Encoder",
    "title": "CCL Manchester Encoder",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ccl/manchester_encoder/readme.html",
    "relUrl": "/apps/ccl/manchester_encoder/readme.html"
  },"31": {
    "doc": "Clock configuration",
    "title": "Clock configuration",
    "content": "This example application shows how to configure the clock system to run the device at maximum frequency. It also outputs a prescaled clock signal on a GPIO pin for measurement and verification. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/clock/clock_config/readme.html#clock-configuration",
    "relUrl": "/apps/clock/clock_config/readme.html#clock-configuration"
  },"32": {
    "doc": "Clock configuration",
    "title": "Description",
    "content": "Clock system generates and distributes the clock for the processor and peripherals. This example application shows how to use the clock manager to configure the device to run at the max possible speed. A prescaled clock signal is routed to GPIO pin to measure the frequency and accuracy of the internal device clock. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/clock/clock_config/readme.html#description",
    "relUrl": "/apps/clock/clock_config/readme.html#description"
  },"33": {
    "doc": "Clock configuration",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/clock/clock_config/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/clock/clock_config/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/clock/clock_config/readme.html#downloading-and-building-the-application"
  },"34": {
    "doc": "Clock configuration",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect an oscilloscope to monitor the PORT pin PB23 (Pin number #8 on the EXT2) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/clock/clock_config/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/clock/clock_config/readme.html#setting-up-the-hardware"
  },"35": {
    "doc": "Clock configuration",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe a clock of 4 MHz on the clock output pin | LED should be blinking continuosly | . Refer to the following table for clock output pin and LED name for different boards: . | Board | Clock output pin | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | PB23 (Pin #8 on the EXT2) | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/clock/clock_config/readme.html#running-the-application",
    "relUrl": "/apps/clock/clock_config/readme.html#running-the-application"
  },"36": {
    "doc": "Clock configuration",
    "title": "Clock configuration",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/clock/clock_config/readme.html",
    "relUrl": "/apps/clock/clock_config/readme.html"
  },"37": {
    "doc": "DAC waveform generation",
    "title": "DAC waveform generation",
    "content": "This example application shows how to use the DAC to generate a 1 KHz Sine or Sawtooth wave with a lookup table. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen/readme.html#dac-waveform-generation",
    "relUrl": "/apps/dac/dac_wav_gen/readme.html#dac-waveform-generation"
  },"38": {
    "doc": "DAC waveform generation",
    "title": "Description",
    "content": "This example application shows how to use the DAC Peripheral library to generate a 1 KHz Sine or Sawtooth wave with lookup table. DAC starts conversion on a trigger from a timer period interrupt configured to occur at every 10 microseconds. In this application, the number of the DAC samples in a lookup table is 100. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen/readme.html#description",
    "relUrl": "/apps/dac/dac_wav_gen/readme.html#description"
  },"39": {
    "doc": "DAC waveform generation",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/dac/dac_wav_gen/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/dac/dac_wav_gen/readme.html#downloading-and-building-the-application"
  },"40": {
    "doc": "DAC waveform generation",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect an oscilloscope to monitor pin 1 (DAC-OUT) of 2-pin header J700 | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/dac/dac_wav_gen/readme.html#setting-up-the-hardware"
  },"41": {
    "doc": "DAC waveform generation",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe a sine wave of 1 KHz frequency on DAC output pins | Press switch to toggle the waveform shape from sine wave to sawtooth wave and back | Refer to the below table for dac output pin and switch details: | . | Board | DAC output pins | Switch Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | pin 1 (DAC-OUT) of 2-pin header J700) | SW0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen/readme.html#running-the-application",
    "relUrl": "/apps/dac/dac_wav_gen/readme.html#running-the-application"
  },"42": {
    "doc": "DAC waveform generation",
    "title": "DAC waveform generation",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen/readme.html",
    "relUrl": "/apps/dac/dac_wav_gen/readme.html"
  },"43": {
    "doc": "DAC waveform generation with DMA",
    "title": "DAC waveform generation with DMA",
    "content": "This example application shows how to use the DAC with the DMA to generate a 5 KHz sinusoidal waveform without CPU intervention. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen_dma/readme.html#dac-waveform-generation-with-dma",
    "relUrl": "/apps/dac/dac_wav_gen_dma/readme.html#dac-waveform-generation-with-dma"
  },"44": {
    "doc": "DAC waveform generation with DMA",
    "title": "Description",
    "content": "The DAC Peripheral library is used in hardware trigger mode to generate a Sine wave. The TC peripheral is configured to generate a trigger every two microseconds. Trigger is connected to the DAC using the EVSYS peripheral. DMA is used to setup a linked list to transfer sine wave samples from lookup table to the DAC “DATABUF” register. In this application, the number of DAC samples per cycle(0 to 360 degrees sine wave) is 100. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen_dma/readme.html#description",
    "relUrl": "/apps/dac/dac_wav_gen_dma/readme.html#description"
  },"45": {
    "doc": "DAC waveform generation with DMA",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/dac/dac_wav_gen_dma/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen_dma/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/dac/dac_wav_gen_dma/readme.html#downloading-and-building-the-application"
  },"46": {
    "doc": "DAC waveform generation with DMA",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect an oscilloscope to monitor pin 1 (DAC-OUT) of 2-pin header labeled J700 | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen_dma/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/dac/dac_wav_gen_dma/readme.html#setting-up-the-hardware"
  },"47": {
    "doc": "DAC waveform generation with DMA",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe a sine wave of 5 KHz frequency on DAC output pin | Refer to the below table for dac output pin details: | . | Board | DACC output pins | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | pin 1 (DAC-OUT) of 2-pin header labeled J700) | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen_dma/readme.html#running-the-application",
    "relUrl": "/apps/dac/dac_wav_gen_dma/readme.html#running-the-application"
  },"48": {
    "doc": "DAC waveform generation with DMA",
    "title": "DAC waveform generation with DMA",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen_dma/readme.html",
    "relUrl": "/apps/dac/dac_wav_gen_dma/readme.html"
  },"49": {
    "doc": "DIVAS accelerate computations",
    "title": "DIVAS accelerate computations",
    "content": "This example application demonstrates how to use the DIVAS accelerator to compute square root, and perform a division and modulus operation. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_accelerate_computations/readme.html#divas-accelerate-computations",
    "relUrl": "/apps/divas/divas_accelerate_computations/readme.html#divas-accelerate-computations"
  },"50": {
    "doc": "DIVAS accelerate computations",
    "title": "Description",
    "content": "The Divide and Square Root Accelerator (DIVAS) is a programmable 32-bit signed or unsigned hardware divider and a 32-bit unsigned square root hardware engine. The DIVAS takes dividend and divisor values and returns the quotient and remainder when it is used as divider. The DIVAS takes unsigned input value and returns its square root and remainder when it is used as square root function. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_accelerate_computations/readme.html#description",
    "relUrl": "/apps/divas/divas_accelerate_computations/readme.html#description"
  },"51": {
    "doc": "DIVAS accelerate computations",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/divas/divas_accelerate_computations/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_accelerate_computations/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/divas/divas_accelerate_computations/readme.html#downloading-and-building-the-application"
  },"52": {
    "doc": "DIVAS accelerate computations",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_accelerate_computations/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/divas/divas_accelerate_computations/readme.html#setting-up-the-hardware"
  },"53": {
    "doc": "DIVAS accelerate computations",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Observe output message in console as follows: . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_accelerate_computations/readme.html#running-the-application",
    "relUrl": "/apps/divas/divas_accelerate_computations/readme.html#running-the-application"
  },"54": {
    "doc": "DIVAS accelerate computations",
    "title": "DIVAS accelerate computations",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_accelerate_computations/readme.html",
    "relUrl": "/apps/divas/divas_accelerate_computations/readme.html"
  },"55": {
    "doc": "DIVAS override C division operator",
    "title": "DIVAS override C division operator",
    "content": "This example application demonstrates how to override C division operator and modulus operator to use the DIVAS accelerator. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_c_operator_override/readme.html#divas-override-c-division-operator",
    "relUrl": "/apps/divas/divas_c_operator_override/readme.html#divas-override-c-division-operator"
  },"56": {
    "doc": "DIVAS override C division operator",
    "title": "Description",
    "content": "The Divide and Square Root Accelerator (DIVAS) is a programmable 32-bit signed or unsigned hardware divider and a 32-bit unsigned square root hardware engine. The DIVAS takes dividend and divisor values and returns the quotient and remainder when it is used as divider. A simpler way of using the DIVAS is making it invisible to the programmer. This example application shows how to use the DIVAS Peripheral library to override C division and modulus operator. When compiler compiles the statements containing division operator (‘/’) and modulus operator (‘%’), it uses DIVAS APIs instead of C Library. Unfortunately, it is not possible for square root because square root does not have a C intrinsic operator. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_c_operator_override/readme.html#description",
    "relUrl": "/apps/divas/divas_c_operator_override/readme.html#description"
  },"57": {
    "doc": "DIVAS override C division operator",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/divas/divas_c_operator_override/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_c_operator_override/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/divas/divas_c_operator_override/readme.html#downloading-and-building-the-application"
  },"58": {
    "doc": "DIVAS override C division operator",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_c_operator_override/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/divas/divas_c_operator_override/readme.html#setting-up-the-hardware"
  },"59": {
    "doc": "DIVAS override C division operator",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Observe output message in console as follows: . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_c_operator_override/readme.html#running-the-application",
    "relUrl": "/apps/divas/divas_c_operator_override/readme.html#running-the-application"
  },"60": {
    "doc": "DIVAS override C division operator",
    "title": "DIVAS override C division operator",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/divas/divas_c_operator_override/readme.html",
    "relUrl": "/apps/divas/divas_c_operator_override/readme.html"
  },"61": {
    "doc": "DMAC memory transfer",
    "title": "DMAC memory transfer",
    "content": "This example application demonstrates how to use the DMAC peripheral to do a memory to memory transfer. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_memory_transfer/readme.html#dmac-memory-transfer",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#dmac-memory-transfer"
  },"62": {
    "doc": "DMAC memory transfer",
    "title": "Description",
    "content": "The application uses a software trigger to initiate a memory-memory transfer from the source buffer to the destination buffer with 16-bit beat size and 32-bit beat size. The number of cycles taken for the DMA transfer is measured using the System timer (SysTick) and reported on the console. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_memory_transfer/readme.html#description",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#description"
  },"63": {
    "doc": "DMAC memory transfer",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/dmac/dmac_memory_transfer/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_memory_transfer/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#downloading-and-building-the-application"
  },"64": {
    "doc": "DMAC memory transfer",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_memory_transfer/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#setting-up-the-hardware"
  },"65": {
    "doc": "DMAC memory transfer",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | LED indicates the success or failure: . | LED is turned ON when the DMAC memory transfer is successful. | Following table provides the LED name | . | Board Name | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . | Observe output message in console as follows: . NOTE: The number of transfer cycles may vary . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_memory_transfer/readme.html#running-the-application",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html#running-the-application"
  },"66": {
    "doc": "DMAC memory transfer",
    "title": "DMAC memory transfer",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_memory_transfer/readme.html",
    "relUrl": "/apps/dmac/dmac_memory_transfer/readme.html"
  },"67": {
    "doc": "DMAC USART echo",
    "title": "DMAC USART echo",
    "content": "This example application demonstrates USART transfer with DMA to receive 10 bytes and echo back the received bytes. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_usart_echo/readme.html#dmac-usart-echo",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#dmac-usart-echo"
  },"68": {
    "doc": "DMAC USART echo",
    "title": "Description",
    "content": "This application demonstrates USART transfer with DMA using SERCOM peripheral configured in USART mode. One DMA channel is used to receive 10 bytes of data from the USART and another DMA channel is used to echo back the received bytes. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_usart_echo/readme.html#description",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#description"
  },"69": {
    "doc": "DMAC USART echo",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/dmac/dmac_usart_echo/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_usart_echo/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#downloading-and-building-the-application"
  },"70": {
    "doc": "DMAC USART echo",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_usart_echo/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#setting-up-the-hardware"
  },"71": {
    "doc": "DMAC USART echo",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Type 10 characters in the console | Entered 10 characters will be echoed back and the LED is toggled | The following table provides the LED names | . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_usart_echo/readme.html#running-the-application",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html#running-the-application"
  },"72": {
    "doc": "DMAC USART echo",
    "title": "DMAC USART echo",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dmac/dmac_usart_echo/readme.html",
    "relUrl": "/apps/dmac/dmac_usart_echo/readme.html"
  },"73": {
    "doc": "DSU compute CRC32",
    "title": "DSU compute CRC32",
    "content": "This example application demonstrates how to use the DSU Peripheral library to compute 32-bit Cyclic Redundancy Checksum (CRC). ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dsu/dsu_crc32_generate/readme.html#dsu-compute-crc32",
    "relUrl": "/apps/dsu/dsu_crc32_generate/readme.html#dsu-compute-crc32"
  },"74": {
    "doc": "DSU compute CRC32",
    "title": "Description",
    "content": "The DSU unit provides support for calculating a 32-bit CRC value for a memory area. This example application computes the 32-bit hardware CRC value using the DSU Peripheral and validates it using a software-calculated CRC value. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dsu/dsu_crc32_generate/readme.html#description",
    "relUrl": "/apps/dsu/dsu_crc32_generate/readme.html#description"
  },"75": {
    "doc": "DSU compute CRC32",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/dsu/dsu_crc32_generate/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dsu/dsu_crc32_generate/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/dsu/dsu_crc32_generate/readme.html#downloading-and-building-the-application"
  },"76": {
    "doc": "DSU compute CRC32",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dsu/dsu_crc32_generate/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/dsu/dsu_crc32_generate/readme.html#setting-up-the-hardware"
  },"77": {
    "doc": "DSU compute CRC32",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | The LED indicates the success or failure: . | LED is turned ON when the hardware CRC value matched with the software calculated CRC value | LED is turned OFF when the hardware CRC value did not match with the software calculated CRC value | . | . The following table provides the LED name . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dsu/dsu_crc32_generate/readme.html#running-the-application",
    "relUrl": "/apps/dsu/dsu_crc32_generate/readme.html#running-the-application"
  },"78": {
    "doc": "DSU compute CRC32",
    "title": "DSU compute CRC32",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/dsu/dsu_crc32_generate/readme.html",
    "relUrl": "/apps/dsu/dsu_crc32_generate/readme.html"
  },"79": {
    "doc": "EIC Interrupt",
    "title": "EIC Interrupt",
    "content": "This example application demonstrates how to generate interrupt using the EIC on switch press and indicate it through an LED. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/eic/eic_led_on_off/readme.html#eic-interrupt",
    "relUrl": "/apps/eic/eic_led_on_off/readme.html#eic-interrupt"
  },"80": {
    "doc": "EIC Interrupt",
    "title": "Description",
    "content": "The application registers an event callback with EIC Peripheral library and toggles an LED for every switch press event. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/eic/eic_led_on_off/readme.html#description",
    "relUrl": "/apps/eic/eic_led_on_off/readme.html#description"
  },"81": {
    "doc": "EIC Interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/eic/eic_led_on_off/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/eic/eic_led_on_off/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/eic/eic_led_on_off/readme.html#downloading-and-building-the-application"
  },"82": {
    "doc": "EIC Interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/eic/eic_led_on_off/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/eic/eic_led_on_off/readme.html#setting-up-the-hardware"
  },"83": {
    "doc": "EIC Interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED toggles on every switch release | . Following table provides the LED name: . | Board | Switch Name | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/eic/eic_led_on_off/readme.html#running-the-application",
    "relUrl": "/apps/eic/eic_led_on_off/readme.html#running-the-application"
  },"84": {
    "doc": "EIC Interrupt",
    "title": "EIC Interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/eic/eic_led_on_off/readme.html",
    "relUrl": "/apps/eic/eic_led_on_off/readme.html"
  },"85": {
    "doc": "EVSYS trigger",
    "title": "EVSYS trigger",
    "content": "This example application demonstrates how to use the EVSYS Peripheral library to setup autonomous, low-latency and configurable communication between peripherals. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/evsys/evsys_trigger/readme.html#evsys-trigger",
    "relUrl": "/apps/evsys/evsys_trigger/readme.html#evsys-trigger"
  },"86": {
    "doc": "EVSYS trigger",
    "title": "Description",
    "content": "This example application shows how to use the EVSYS Peripheral library to route the events generated by the switch to toggle an LED without CPU intervention. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/evsys/evsys_trigger/readme.html#description",
    "relUrl": "/apps/evsys/evsys_trigger/readme.html#description"
  },"87": {
    "doc": "EVSYS trigger",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/evsys/evsys_trigger/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/evsys/evsys_trigger/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/evsys/evsys_trigger/readme.html#downloading-and-building-the-application"
  },"88": {
    "doc": "EVSYS trigger",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/evsys/evsys_trigger/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/evsys/evsys_trigger/readme.html#setting-up-the-hardware"
  },"89": {
    "doc": "EVSYS trigger",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED toggles on every switch release | . Following table provides the LED and switch names: . | Board | Switch Name | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/evsys/evsys_trigger/readme.html#running-the-application",
    "relUrl": "/apps/evsys/evsys_trigger/readme.html#running-the-application"
  },"90": {
    "doc": "EVSYS trigger",
    "title": "EVSYS trigger",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/evsys/evsys_trigger/readme.html",
    "relUrl": "/apps/evsys/evsys_trigger/readme.html"
  },"91": {
    "doc": "FREQM measurement",
    "title": "FREQM measurement",
    "content": "This example application demonstrates how to use the FREQM peripheral to measure the frequency of the internal RC Oscillator. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/freqm/freqm_measure_clock_freq/readme.html#freqm-measurement",
    "relUrl": "/apps/freqm/freqm_measure_clock_freq/readme.html#freqm-measurement"
  },"92": {
    "doc": "FREQM measurement",
    "title": "Description",
    "content": "The Frequency Meter (FREQM) can be used to accurately measure the frequency of a clock by comparing it to a known reference clock. The FREQM counts the number of periods of the measured clock with respect to the reference clock. This example application shows how to measure the cpu frequency using the 32-kHz Crystal oscillator as the reference clock. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/freqm/freqm_measure_clock_freq/readme.html#description",
    "relUrl": "/apps/freqm/freqm_measure_clock_freq/readme.html#description"
  },"93": {
    "doc": "FREQM measurement",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/freqm/freqm_measure_clock_freq/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/freqm/freqm_measure_clock_freq/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/freqm/freqm_measure_clock_freq/readme.html#downloading-and-building-the-application"
  },"94": {
    "doc": "FREQM measurement",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/freqm/freqm_measure_clock_freq/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/freqm/freqm_measure_clock_freq/readme.html#setting-up-the-hardware"
  },"95": {
    "doc": "FREQM measurement",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Observe output message in console as follows: . Note that the measured clock frequency is approximate. The actual frequency may vary because of measurement error . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/freqm/freqm_measure_clock_freq/readme.html#running-the-application",
    "relUrl": "/apps/freqm/freqm_measure_clock_freq/readme.html#running-the-application"
  },"96": {
    "doc": "FREQM measurement",
    "title": "FREQM measurement",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/freqm/freqm_measure_clock_freq/readme.html",
    "relUrl": "/apps/freqm/freqm_measure_clock_freq/readme.html"
  },"97": {
    "doc": "NVMCTRL data flash",
    "title": "NVMCTRL data flash",
    "content": "This example application demonstrates code execution from the main Flash memory while performing erase operation in data flash section. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_data_flash/readme.html#nvmctrl-data-flash",
    "relUrl": "/apps/nvmctrl/nvmctrl_data_flash/readme.html#nvmctrl-data-flash"
  },"98": {
    "doc": "NVMCTRL data flash",
    "title": "Description",
    "content": "The main Flash memory can not be read while it is being erased or written, the CPU is stalled during the entire operation. Some devices has the Flash region called data flash that supports read while write feature. The user could execute code from main Flash while the data flash region is being erased or written. This application demonstrates code execution from main Flash while the data flash section is being erased. A software counter is incremented while performing erase operation in data flash section and the counter value is reported in the console. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_data_flash/readme.html#description",
    "relUrl": "/apps/nvmctrl/nvmctrl_data_flash/readme.html#description"
  },"99": {
    "doc": "NVMCTRL data flash",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/nvmctrl/nvmctrl_data_flash/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_data_flash/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/nvmctrl/nvmctrl_data_flash/readme.html#downloading-and-building-the-application"
  },"100": {
    "doc": "NVMCTRL data flash",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_data_flash/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/nvmctrl/nvmctrl_data_flash/readme.html#setting-up-the-hardware"
  },"101": {
    "doc": "NVMCTRL data flash",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The LED blinks continuously on success . The following table provides the LED name. | Board Name | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . | Observe output message in console as follows: . NOTE: Value of Flag incremented while erase is happening from data flash area may vary . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_data_flash/readme.html#running-the-application",
    "relUrl": "/apps/nvmctrl/nvmctrl_data_flash/readme.html#running-the-application"
  },"102": {
    "doc": "NVMCTRL data flash",
    "title": "NVMCTRL data flash",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_data_flash/readme.html",
    "relUrl": "/apps/nvmctrl/nvmctrl_data_flash/readme.html"
  },"103": {
    "doc": "NVMCTRL read write",
    "title": "NVMCTRL read write",
    "content": "This example application demonstrates how to use the NVMCTRL to erase and program the internal Flash memory. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#nvmctrl-read-write",
    "relUrl": "/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#nvmctrl-read-write"
  },"104": {
    "doc": "NVMCTRL read write",
    "title": "Description",
    "content": "This example uses the NVMCTRL peripheral library to erase a row and write an array of values to the internal Flash memory. It verifies the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#description",
    "relUrl": "/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#description"
  },"105": {
    "doc": "NVMCTRL read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/nvmctrl/nvmctrl_flash_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#downloading-and-building-the-application"
  },"106": {
    "doc": "NVMCTRL read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#setting-up-the-hardware"
  },"107": {
    "doc": "NVMCTRL read write",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | The LED indicates the success or failure: . | The LED is turned ON when the value read from the flash memory matched with the written value | The LED is turned OFF when the value read from the flash memory did not match with the written value | . | The following table provides the LED name: | . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#running-the-application",
    "relUrl": "/apps/nvmctrl/nvmctrl_flash_read_write/readme.html#running-the-application"
  },"108": {
    "doc": "NVMCTRL read write",
    "title": "NVMCTRL read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_flash_read_write/readme.html",
    "relUrl": "/apps/nvmctrl/nvmctrl_flash_read_write/readme.html"
  },"109": {
    "doc": "PM wakeup using EIC",
    "title": "PM wakeup using EIC",
    "content": "This application demonstrates entering the low power modes and exiting it using the EIC. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_eic/readme.html#pm-wakeup-using-eic",
    "relUrl": "/apps/pm/pm_wakeup_eic/readme.html#pm-wakeup-using-eic"
  },"110": {
    "doc": "PM wakeup using EIC",
    "title": "Description",
    "content": "The PM peripheral library is used to enter the low power mode and the device exits low power mode when the button is pressed. To identify a button push, the EIC is configured to detect a falling edge on the GPIO pin connected to the switch. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_eic/readme.html#description",
    "relUrl": "/apps/pm/pm_wakeup_eic/readme.html#description"
  },"111": {
    "doc": "PM wakeup using EIC",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/pm/pm_wakeup_eic/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_eic/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/pm/pm_wakeup_eic/readme.html#downloading-and-building-the-application"
  },"112": {
    "doc": "PM wakeup using EIC",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_eic/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/pm/pm_wakeup_eic/readme.html#setting-up-the-hardware"
  },"113": {
    "doc": "PM wakeup using EIC",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | LED is blinked continuously using the SysTick Timer | The console displays the following message . | Select ‘a’ or ‘b’ to enter the low power mode (The LED is turned off when the device enters low power mode) | Press the switch to exit the low power mode | LED will start blinking and the console displays the following message: . | . The following table provides the detail of switch and LED . | Board | Switch Name | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_eic/readme.html#running-the-application",
    "relUrl": "/apps/pm/pm_wakeup_eic/readme.html#running-the-application"
  },"114": {
    "doc": "PM wakeup using EIC",
    "title": "PM wakeup using EIC",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_eic/readme.html",
    "relUrl": "/apps/pm/pm_wakeup_eic/readme.html"
  },"115": {
    "doc": "PM wakeup using RTC",
    "title": "PM wakeup using RTC",
    "content": "This example demonstrates entering the low power modes and exiting it using the RTC. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_rtc/readme.html#pm-wakeup-using-rtc",
    "relUrl": "/apps/pm/pm_wakeup_rtc/readme.html#pm-wakeup-using-rtc"
  },"116": {
    "doc": "PM wakeup using RTC",
    "title": "Description",
    "content": "The PM Peripheral library is used to enter into the low power modes, and uses the RTC timer to wake up the device from the low power mode. The RTC peripheral is run continuously, including in the device’s low-power sleep modes. The RTC counter value is continuously compared with the Compare registers and generates compare match interrupt when compare match occurs to wake up the device. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_rtc/readme.html#description",
    "relUrl": "/apps/pm/pm_wakeup_rtc/readme.html#description"
  },"117": {
    "doc": "PM wakeup using RTC",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/pm/pm_wakeup_rtc/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_rtc/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/pm/pm_wakeup_rtc/readme.html#downloading-and-building-the-application"
  },"118": {
    "doc": "PM wakeup using RTC",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_rtc/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/pm/pm_wakeup_rtc/readme.html#setting-up-the-hardware"
  },"119": {
    "doc": "PM wakeup using RTC",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | LED is blinked continuously using the SysTick Timer | The console displays the following message . | Select ‘a’ or ‘b’ to enter the low power mode (LED is turned off when the device enters low power mode) | When the device wakes up on RTC compare match interrupt, the LED starts blinking and the console displays the following message . | . The following table provides the details of LED . | Board | LED Name |   | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 |   | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_rtc/readme.html#running-the-application",
    "relUrl": "/apps/pm/pm_wakeup_rtc/readme.html#running-the-application"
  },"120": {
    "doc": "PM wakeup using RTC",
    "title": "PM wakeup using RTC",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_rtc/readme.html",
    "relUrl": "/apps/pm/pm_wakeup_rtc/readme.html"
  },"121": {
    "doc": "PORT polling",
    "title": "PORT polling",
    "content": "This example application demonstrate how to poll the switch input, and indicate the switch status using the LED. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/port/port_led_on_off_polling/readme.html#port-polling",
    "relUrl": "/apps/port/port_led_on_off_polling/readme.html#port-polling"
  },"122": {
    "doc": "PORT polling",
    "title": "Description",
    "content": "This application uses the PORT Peripheral library to read the GPIO pin connected to the switch, and drives the GPIO pin connected to the LED to indicate the switch status. LED is turned ON when the switch is pressed and turned OFF when the switch is released. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/port/port_led_on_off_polling/readme.html#description",
    "relUrl": "/apps/port/port_led_on_off_polling/readme.html#description"
  },"123": {
    "doc": "PORT polling",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/port/port_led_on_off_polling/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/port/port_led_on_off_polling/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/port/port_led_on_off_polling/readme.html#downloading-and-building-the-application"
  },"124": {
    "doc": "PORT polling",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/port/port_led_on_off_polling/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/port/port_led_on_off_polling/readme.html#setting-up-the-hardware"
  },"125": {
    "doc": "PORT polling",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED is turned on when the switch is pressed and turned off when the switch is released. | . Refer the table below for details of switch and LED . | Board | Switch Name | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/port/port_led_on_off_polling/readme.html#running-the-application",
    "relUrl": "/apps/port/port_led_on_off_polling/readme.html#running-the-application"
  },"126": {
    "doc": "PORT polling",
    "title": "PORT polling",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/port/port_led_on_off_polling/readme.html",
    "relUrl": "/apps/port/port_led_on_off_polling/readme.html"
  },"127": {
    "doc": "RSTC reset cause",
    "title": "RSTC reset cause",
    "content": "This example shows how to use the RSTC peripheral to indicate the cause of the device reset. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rstc/rstc_reset_cause/readme.html#rstc-reset-cause",
    "relUrl": "/apps/rstc/rstc_reset_cause/readme.html#rstc-reset-cause"
  },"128": {
    "doc": "RSTC reset cause",
    "title": "Description",
    "content": "Reset Controller collects the various reset sources and generates reset for the device and allows the reset source to be identified by the software. Power On Reset: Device contains a power-on-reset (POR) detector, which keeps the system reset until power is stable. This eliminates the need for external reset circuitry to guarantee stable operation when powering up the device. VDDCORE Brown Out Reset: BOD12 will reset the device if a voltage of 1.2 V or below is observed on the I/O pin supplying power to the MCU core (VDDCORE). VDDANA Brown Out Reset: BOD33 resets the device if the voltage on the VDDANA pin falls below a value configured by the SYSCTRL . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rstc/rstc_reset_cause/readme.html#description",
    "relUrl": "/apps/rstc/rstc_reset_cause/readme.html#description"
  },"129": {
    "doc": "RSTC reset cause",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rstc/rstc_reset_cause/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rstc/rstc_reset_cause/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rstc/rstc_reset_cause/readme.html#downloading-and-building-the-application"
  },"130": {
    "doc": "RSTC reset cause",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rstc/rstc_reset_cause/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rstc/rstc_reset_cause/readme.html#setting-up-the-hardware"
  },"131": {
    "doc": "RSTC reset cause",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | LED is blinked continuously using the SysTick Timer | Console displays the following message . | Watchdog timer is fed periodically using System Timer (SysTick) to prevent the WDT reset and the LED is toggled | Press the switch to put the system in deadlock (LED should stop blinking) | WDT will reset the device in four seconds and the demonstration should restart | Console should display the following message . | . Following table provides the details of switch and LED . | Board | Switch Name | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rstc/rstc_reset_cause/readme.html#running-the-application",
    "relUrl": "/apps/rstc/rstc_reset_cause/readme.html#running-the-application"
  },"132": {
    "doc": "RSTC reset cause",
    "title": "RSTC reset cause",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rstc/rstc_reset_cause/readme.html",
    "relUrl": "/apps/rstc/rstc_reset_cause/readme.html"
  },"133": {
    "doc": "RTC alarm interrupt",
    "title": "RTC alarm interrupt",
    "content": "This example shows how to use the RTC to configure the time and generate the alarm. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_alarm/readme.html#rtc-alarm-interrupt",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#rtc-alarm-interrupt"
  },"134": {
    "doc": "RTC alarm interrupt",
    "title": "Description",
    "content": "This example application shows how to setup system time and configure alarm using the RTC Peripheral Library. The application sets up an alarm to be generated after 20 seconds of the configured system time. The application displays a message on the alarm trigger. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_alarm/readme.html#description",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#description"
  },"135": {
    "doc": "RTC alarm interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtc/rtc_alarm/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_alarm/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#downloading-and-building-the-application"
  },"136": {
    "doc": "RTC alarm interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_alarm/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#setting-up-the-hardware"
  },"137": {
    "doc": "RTC alarm interrupt",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | The console displays the current time and the alarm time (System time starts at 12:00:00 and gets updated every second) . | Once the alarm time is reached, it print the alarm message and turns on the LED (System time keeps updating) . | . Following table provides the LED name: . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_alarm/readme.html#running-the-application",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html#running-the-application"
  },"138": {
    "doc": "RTC alarm interrupt",
    "title": "RTC alarm interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_alarm/readme.html",
    "relUrl": "/apps/rtc/rtc_alarm/readme.html"
  },"139": {
    "doc": "RTC periodic interrupt",
    "title": "RTC periodic interrupt",
    "content": "This example application shows how to use the RTC to generate periodic interrupts. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_periodic_timeout/readme.html#rtc-periodic-interrupt",
    "relUrl": "/apps/rtc/rtc_periodic_timeout/readme.html#rtc-periodic-interrupt"
  },"140": {
    "doc": "RTC periodic interrupt",
    "title": "Description",
    "content": "This example application demonstrates how to use the 32-bit timer mode of the RTC to generate periodic ticks. It toggles an LED every time the callback is triggered. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_periodic_timeout/readme.html#description",
    "relUrl": "/apps/rtc/rtc_periodic_timeout/readme.html#description"
  },"141": {
    "doc": "RTC periodic interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtc/rtc_periodic_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_periodic_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtc/rtc_periodic_timeout/readme.html#downloading-and-building-the-application"
  },"142": {
    "doc": "RTC periodic interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_periodic_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtc/rtc_periodic_timeout/readme.html#setting-up-the-hardware"
  },"143": {
    "doc": "RTC periodic interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | The LED blinks continuously | . Following table provides the LED name: . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_periodic_timeout/readme.html#running-the-application",
    "relUrl": "/apps/rtc/rtc_periodic_timeout/readme.html#running-the-application"
  },"144": {
    "doc": "RTC periodic interrupt",
    "title": "RTC periodic interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/rtc/rtc_periodic_timeout/readme.html",
    "relUrl": "/apps/rtc/rtc_periodic_timeout/readme.html"
  },"145": {
    "doc": "SDADC Sample",
    "title": "SDADC Sample",
    "content": "This example application shows how to sample an analog input using SDADC and displays the converted samples on a serial terminal. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sdadc/sdadc_sample/readme.html#sdadc-sample",
    "relUrl": "/apps/sdadc/sdadc_sample/readme.html#sdadc-sample"
  },"146": {
    "doc": "SDADC Sample",
    "title": "Description",
    "content": "In this application, the DAC output is fed to an analog input for the SDADC conversion. An analog input is converted by a software trigger and the converted value is displayed on the console. DAC output is changed by 0.1 V upon switch press. The SDADC sample output is between 0.0 V to 3.3 V and it starts from 1.65 V when device is reset. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sdadc/sdadc_sample/readme.html#description",
    "relUrl": "/apps/sdadc/sdadc_sample/readme.html#description"
  },"147": {
    "doc": "SDADC Sample",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/sdadc/sdadc_sample/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sdadc/sdadc_sample/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/sdadc/sdadc_sample/readme.html#downloading-and-building-the-application"
  },"148": {
    "doc": "SDADC Sample",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Analog input (AIN1) of SDADC is fed from the DAC output. | SDADC “INP1” is mapped to Port Pin “PB09”, and is routed to “Pin 3 of the EXT1 header” | SDADC “INN1” is mapped to Port Pin “PB08”, and is routed to “Pin4 of the EXT1 header” | DAC output is available between Port Pin “PA02” and GND pin and these are routed to “Pin 1 and Pin 2 of the DAC header J700” | . | Use the jumper wires to connect below pins: . | “Pin 3 of the EXT1 header” to “Pin 1 of the DAC header (J700)” | “Pin 4 of the EXT1 header” to “Pin 2 of the DAC header (J700)” | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sdadc/sdadc_sample/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/sdadc/sdadc_sample/readme.html#setting-up-the-hardware"
  },"149": {
    "doc": "SDADC Sample",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | The console displays the converted digital value | Press the switch to change the DAC value by 0.1 V and observe the changed SDADC value on the console | . Refer to the table below for details of the switch used: . | Board | Switch | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | SW0 | . | Console displays the SDADC count and the SDADC input voltage in the console as shown below: . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sdadc/sdadc_sample/readme.html#running-the-application",
    "relUrl": "/apps/sdadc/sdadc_sample/readme.html#running-the-application"
  },"150": {
    "doc": "SDADC Sample",
    "title": "SDADC Sample",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sdadc/sdadc_sample/readme.html",
    "relUrl": "/apps/sdadc/sdadc_sample/readme.html"
  },"151": {
    "doc": "SERCOM I2C EEPROM read write",
    "title": "SERCOM I2C EEPROM read write",
    "content": "This example application demonstrates how to use the SERCOM peripheral to write and read from the I2C serial EEPROM memory. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/master/i2c_eeprom/readme.html#sercom-i2c-eeprom-read-write",
    "relUrl": "/apps/sercom/i2c/master/i2c_eeprom/readme.html#sercom-i2c-eeprom-read-write"
  },"152": {
    "doc": "SERCOM I2C EEPROM read write",
    "title": "Description",
    "content": "This example uses the I2C peripheral library to write an array of values to the I2C Serial EEPROM and verify the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/master/i2c_eeprom/readme.html#description",
    "relUrl": "/apps/sercom/i2c/master/i2c_eeprom/readme.html#description"
  },"153": {
    "doc": "SERCOM I2C EEPROM read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/sercom/i2c/master/i2c_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/master/i2c_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/sercom/i2c/master/i2c_eeprom/readme.html#downloading-and-building-the-application"
  },"154": {
    "doc": "SERCOM I2C EEPROM read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect mikroBUS Xplained Pro board to EXT1 header | Plug the EEPROM 3 click Board into the MikroBus socket of the mikroBUS Xplained Pro board | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/master/i2c_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/sercom/i2c/master/i2c_eeprom/readme.html#setting-up-the-hardware"
  },"155": {
    "doc": "SERCOM I2C EEPROM read write",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED indicates success or failure: . | The LED is turned ON when the value read from the EEPROM matched with the written value | The LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . The following table provides the LED name: . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/master/i2c_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/sercom/i2c/master/i2c_eeprom/readme.html#running-the-application"
  },"156": {
    "doc": "SERCOM I2C EEPROM read write",
    "title": "SERCOM I2C EEPROM read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/master/i2c_eeprom/readme.html",
    "relUrl": "/apps/sercom/i2c/master/i2c_eeprom/readme.html"
  },"157": {
    "doc": "SERCOM I2C EEPROM emulation (I2C slave)",
    "title": "SERCOM I2C EEPROM emulation (I2C slave)",
    "content": "This example application demonstrates how to use the SERCOM peripheral in slave mode. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#sercom-i2c-eeprom-emulation-i2c-slave",
    "relUrl": "/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#sercom-i2c-eeprom-emulation-i2c-slave"
  },"158": {
    "doc": "SERCOM I2C EEPROM emulation (I2C slave)",
    "title": "Description",
    "content": "This example uses the I2C peripheral library in slave mode and emulates an EEPROM of 512 bytes. There are two pages each of size 256 bytes. I2C slave expects two bytes of memory address from the I2C master and the memory address can range from 0x00 to 0x1FF. I2C slave application supports following: . Byte Write: The I2C master sends the slave address, followed by two bytes of memory address. The slave provides the data present at the requested memory address. Page Write: A page write is initiated the same way as a byte write, but the I2C master can write up-to 256 bytes (1 page). If more than 256 bytes are sent by the I2C master to the I2C slave, the memory address will “roll over” and previous data will be overwritten. The address “roll over” during write is from the last byte of the current page to the first byte of the same page. Current Address Read: The internal memory address counter maintains the last address accessed during the last read or write operation, incremented by one. Once the device address with the read/write bit set to one is clocked in and acknowledged by the EEPROM, the data byte at the current address is serially clocked out. After reading the data from the current address, the I2C master sends NAK and generates a STOP condition. Random Read: The I2C master writes the 2 byte memory address and then reads the data from that memory address. After reading the data, the I2C master sends NAK and generates a STOP condition. Sequential Read: Sequential reads are initiated by either a current address read or a random address read. As long as the EEPROM receives an acknowledge, it will continue to increment the memory address and serially clock out sequential data bytes. When the memory address limit is reached (0x1FF), the memory address will “roll over” to 0x00 and the sequential read will continue. The sequential read operation is terminated when the I2C master sends a NAK and generates a STOP condition. To run the application, two evaluation kits will be required - one acting as the I2C master and the other as the I2C slave. The I2C master application to be used for this demo application is available under apps/sercom/i2c/master/i2c_eeprom/firmware folder. I2C master writes an array of values to the I2C slave and verifies the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#description",
    "relUrl": "/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#description"
  },"159": {
    "doc": "SERCOM I2C EEPROM emulation (I2C slave)",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/sercom/i2c/slave/i2c_eeprom_emulation/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#downloading-and-building-the-application"
  },"160": {
    "doc": "SERCOM I2C EEPROM emulation (I2C slave)",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Hardware setup requires two boards, one acting as the I2C Master and the other as the I2C slave. Note: The I2C master demo - i2c_eeprom on the SAM E54 Xplained Pro uses the on-board EEPROM and hence cannot be used as is with this I2C slave application . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | On EXT1 header, connect I2C SDA line on Pin 11 (PA12) and I2C SCL line on Pin 12 (PA13) with the corresponding SDA and SCL lines of the I2C master | Connect a ground wire from Pin 2 of EXT1 to the ground of the I2C master | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#setting-up-the-hardware"
  },"161": {
    "doc": "SERCOM I2C EEPROM emulation (I2C slave)",
    "title": "Running the Application",
    "content": ". | Build and program I2C EEPROM application from apps/sercom/i2c/master/i2c_eeprom/firmware onto the evaluation kit used as I2C master | Build and Program I2C slave application onto the evaluation kit used as I2C slave | Run application on I2C slave board and then run the application on I2C master board | LED on the I2C master board indicates success or failure: . | The LED is turned ON when the value read from the I2C slave matches with the written value | The LED is turned OFF when the value read from the I2C slave did not match with the written value | . | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#running-the-application",
    "relUrl": "/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html#running-the-application"
  },"162": {
    "doc": "SERCOM I2C EEPROM emulation (I2C slave)",
    "title": "SERCOM I2C EEPROM emulation (I2C slave)",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html",
    "relUrl": "/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html"
  },"163": {
    "doc": "SERCOM SPI EEPROM read write",
    "title": "SERCOM SPI EEPROM read write",
    "content": "This example application demonstrates how to use the SERCOM SPI peripheral to write and read from the SPI serial EEPROM memory. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_eeprom_write_read/readme.html#sercom-spi-eeprom-read-write",
    "relUrl": "/apps/sercom/spi/spi_eeprom_write_read/readme.html#sercom-spi-eeprom-read-write"
  },"164": {
    "doc": "SERCOM SPI EEPROM read write",
    "title": "Description",
    "content": "This example uses the SERCOM SPI peripheral library to write an array of values to the SPI Serial EEPROM and verify the value written by reading the values back and comparing it to the value written. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_eeprom_write_read/readme.html#description",
    "relUrl": "/apps/sercom/spi/spi_eeprom_write_read/readme.html#description"
  },"165": {
    "doc": "SERCOM SPI EEPROM read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/sercom/spi/spi_eeprom_write_read/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_eeprom_write_read/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/sercom/spi/spi_eeprom_write_read/readme.html#downloading-and-building-the-application"
  },"166": {
    "doc": "SERCOM SPI EEPROM read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect a mikroBUS Xplained Pro board to the EXT2 header | Plug an EEPROM 4 Click board into the MikroBus socket of the mikroBUS Xplained Pro board | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_eeprom_write_read/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/sercom/spi/spi_eeprom_write_read/readme.html#setting-up-the-hardware"
  },"167": {
    "doc": "SERCOM SPI EEPROM read write",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its IDE | LED indicates the success or failure: . | LED is turned ON when the value read from the EEPROM matched with the written value | LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . Following table provides the LED name: . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_eeprom_write_read/readme.html#running-the-application",
    "relUrl": "/apps/sercom/spi/spi_eeprom_write_read/readme.html#running-the-application"
  },"168": {
    "doc": "SERCOM SPI EEPROM read write",
    "title": "SERCOM SPI EEPROM read write",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_eeprom_write_read/readme.html",
    "relUrl": "/apps/sercom/spi/spi_eeprom_write_read/readme.html"
  },"169": {
    "doc": "SERCOM SPI interrupt",
    "title": "SERCOM SPI interrupt",
    "content": "This example application shows how to use SERCOM SPI PLIB with external loop back to write and then read back an array of data in interrupt mode. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#sercom-spi-interrupt",
    "relUrl": "/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#sercom-spi-interrupt"
  },"170": {
    "doc": "SERCOM SPI interrupt",
    "title": "Description",
    "content": "This example shows the transmit and receive operation over a SPI interface in a non-blocking manner. The peripheral interrupt is used to manage the transfer. It transmits an array of values and verifies the value transmitted by receiving the values back with look back and comparing it to the value transmitted. The loop back test requires the MOSI output pin to be connected to the MISO input pin so that anything transmitted will also be received. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#description",
    "relUrl": "/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#description"
  },"171": {
    "doc": "SERCOM SPI interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/sercom/spi/spi_self_loopback_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#downloading-and-building-the-application"
  },"172": {
    "doc": "SERCOM SPI interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Use a jumper wire to short pin 16 and pin 17 of the EXT2 header | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#setting-up-the-hardware"
  },"173": {
    "doc": "SERCOM SPI interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application project using its IDE | LED indicates the success or failure: . | The LED is turned ON when the value received matched with the transmitted value | The LED is turned OFF when the value received did not match with the transmitted value | . | SPI data transfer and compare match checking happens only one time Following table provides the LED name: | . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/sercom/spi/spi_self_loopback_interrupt/readme.html#running-the-application"
  },"174": {
    "doc": "SERCOM SPI interrupt",
    "title": "SERCOM SPI interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_self_loopback_interrupt/readme.html",
    "relUrl": "/apps/sercom/spi/spi_self_loopback_interrupt/readme.html"
  },"175": {
    "doc": "SERCOM USART interrupt",
    "title": "SERCOM USART interrupt",
    "content": "This example application demonstrates how to use the SERCOM peripheral in USART mode to transfer data in a non-blocking manner. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/usart/usart_echo_interrupt/readme.html#sercom-usart-interrupt",
    "relUrl": "/apps/sercom/usart/usart_echo_interrupt/readme.html#sercom-usart-interrupt"
  },"176": {
    "doc": "SERCOM USART interrupt",
    "title": "Description",
    "content": "This example shows the read and write operation over a UART in a non-blocking manner. The peripheral interrupt is used to manage the transfer. It receives 10 characters from the terminal window and echoes them back. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/usart/usart_echo_interrupt/readme.html#description",
    "relUrl": "/apps/sercom/usart/usart_echo_interrupt/readme.html#description"
  },"177": {
    "doc": "SERCOM USART interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/sercom/usart/usart_echo_interrupt/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/usart/usart_echo_interrupt/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/sercom/usart/usart_echo_interrupt/readme.html#downloading-and-building-the-application"
  },"178": {
    "doc": "SERCOM USART interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/usart/usart_echo_interrupt/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/sercom/usart/usart_echo_interrupt/readme.html#setting-up-the-hardware"
  },"179": {
    "doc": "SERCOM USART interrupt",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Type 10 characters in the console | Entered characters will be echoed back and the LED is toggled | The following table provides the LED names | . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/usart/usart_echo_interrupt/readme.html#running-the-application",
    "relUrl": "/apps/sercom/usart/usart_echo_interrupt/readme.html#running-the-application"
  },"180": {
    "doc": "SERCOM USART interrupt",
    "title": "SERCOM USART interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/sercom/usart/usart_echo_interrupt/readme.html",
    "relUrl": "/apps/sercom/usart/usart_echo_interrupt/readme.html"
  },"181": {
    "doc": "Systick periodic interrupt",
    "title": "Systick periodic interrupt",
    "content": "This example shows how to use the SysTick to generate periodic interrupts. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/systick/systick_periodic_timeout/readme.html#systick-periodic-interrupt",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#systick-periodic-interrupt"
  },"182": {
    "doc": "Systick periodic interrupt",
    "title": "Description",
    "content": "This example application configures the SysTick Peripheral Library to generate periodic ticks. The application registers a periodic timeout callback. It toggles an LED every time the callback is triggered. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/systick/systick_periodic_timeout/readme.html#description",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#description"
  },"183": {
    "doc": "Systick periodic interrupt",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/systick/systick_periodic_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/systick/systick_periodic_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#downloading-and-building-the-application"
  },"184": {
    "doc": "Systick periodic interrupt",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/systick/systick_periodic_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#setting-up-the-hardware"
  },"185": {
    "doc": "Systick periodic interrupt",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | The LED blinks continuously | . Following table provides the LED name: . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/systick/systick_periodic_timeout/readme.html#running-the-application",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html#running-the-application"
  },"186": {
    "doc": "Systick periodic interrupt",
    "title": "Systick periodic interrupt",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/systick/systick_periodic_timeout/readme.html",
    "relUrl": "/apps/systick/systick_periodic_timeout/readme.html"
  },"187": {
    "doc": "TC capture mode",
    "title": "TC capture mode",
    "content": "This example shows how to use the TC module in capture mode to measure duty cycle and frequency of an external input. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_capture_mode/readme.html#tc-capture-mode",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#tc-capture-mode"
  },"188": {
    "doc": "TC capture mode",
    "title": "Description",
    "content": "The TC channel is configured in capture mode to measure duty cycle and frequency of the PWM signal. The PWM signal is generated using another TC channel which is configured in compare mode. Output of the compare TC channel is connected to input of the capture TC channel. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_capture_mode/readme.html#description",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#description"
  },"189": {
    "doc": "TC capture mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tc/tc_capture_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_capture_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#downloading-and-building-the-application"
  },"190": {
    "doc": "TC capture mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | TC0 generates the PWM waveform on pin PB09 . | TC0 output is routed using EIC and EVSYS to TC1 input event line | . | TC1 is configured in capture mode . | Capture trigger is provided by input event line | . | Use a jumper wire to connect “Pin 3 of EXT1 (TC0_W01)” to “Pin 7 of EXT2 (EIC_EXTINT6)” | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_capture_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#setting-up-the-hardware"
  },"191": {
    "doc": "TC capture mode",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Console displays the frequency and duty cycle of the input signal | Frequency is constant (800 Hz) and duty cycle changes by 1% | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_capture_mode/readme.html#running-the-application",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html#running-the-application"
  },"192": {
    "doc": "TC capture mode",
    "title": "TC capture mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_capture_mode/readme.html",
    "relUrl": "/apps/tc/tc_capture_mode/readme.html"
  },"193": {
    "doc": "TC compare mode",
    "title": "TC compare mode",
    "content": "This example shows how to use the TC module in compare mode to generate an active low, active high, and toggle output on compare match. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_compare_mode/readme.html#tc-compare-mode",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#tc-compare-mode"
  },"194": {
    "doc": "TC compare mode",
    "title": "Description",
    "content": "Three TC channels are configured in compare mode. Each channel generates different output waveform depending upon configured action on compare match and period match. Active low output: Output is set high on compare 1 match and is set low on compare 0 match. Active high output: Output is set low on compare 1 match and is set high on compare 0 match. Toggle output: Output toggles on compare 0 match. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_compare_mode/readme.html#description",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#description"
  },"195": {
    "doc": "TC compare mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tc/tc_compare_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_compare_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#downloading-and-building-the-application"
  },"196": {
    "doc": "TC compare mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_compare_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#setting-up-the-hardware"
  },"197": {
    "doc": "TC compare mode",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe generated waveforms on the oscilloscope | . PIC32CM MC00 Curiosity Pro Evaluation Kit . | Timer Channel | Pin | Observable characteristic of the waveform | . | TC0_WO1 | PB09 (Pin 3 of EXT1 | Active low ouptut with 75 Hz frequency | . | TC1_WO1 | PB11 (Pin 8 of EXT1) | Active high output with 75 Hz frequency | . | TC2_WO0 | PB02 (Pin 9 of EXT1) | toggle output with 37.5 Hz frequency | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_compare_mode/readme.html#running-the-application",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html#running-the-application"
  },"198": {
    "doc": "TC compare mode",
    "title": "TC compare mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_compare_mode/readme.html",
    "relUrl": "/apps/tc/tc_compare_mode/readme.html"
  },"199": {
    "doc": "TC timer mode",
    "title": "TC timer mode",
    "content": "This example shows how to use the TC module in timer mode to generate periodic interrupt. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_timer_mode/readme.html#tc-timer-mode",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#tc-timer-mode"
  },"200": {
    "doc": "TC timer mode",
    "title": "Description",
    "content": "TC channel is configured in timer mode and generates periodic interrupt. LED is toggled in the interrupt handler to indicate periodic callback. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_timer_mode/readme.html#description",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#description"
  },"201": {
    "doc": "TC timer mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tc/tc_timer_mode/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_timer_mode/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#downloading-and-building-the-application"
  },"202": {
    "doc": "TC timer mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_timer_mode/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#setting-up-the-hardware"
  },"203": {
    "doc": "TC timer mode",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe that the LED blinks once every second | . Following table provides the LED name: . | Board | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_timer_mode/readme.html#running-the-application",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html#running-the-application"
  },"204": {
    "doc": "TC timer mode",
    "title": "TC timer mode",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tc/tc_timer_mode/readme.html",
    "relUrl": "/apps/tc/tc_timer_mode/readme.html"
  },"205": {
    "doc": "TCC PWM generation",
    "title": "TCC PWM generation",
    "content": "This example application shows how to use the TCC to generate a 2 or 3 phase PWM signals for motor control with dead time. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tcc/tcc_synchronous_pwm_channels/readme.html#tcc-pwm-generation",
    "relUrl": "/apps/tcc/tcc_synchronous_pwm_channels/readme.html#tcc-pwm-generation"
  },"206": {
    "doc": "TCC PWM generation",
    "title": "Description",
    "content": "TCC module is configured to generate synchronous 2 or 3 phase PWM signals with dead time. The duty cycle of the PWM signals is updated in the period interrupt handler. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tcc/tcc_synchronous_pwm_channels/readme.html#description",
    "relUrl": "/apps/tcc/tcc_synchronous_pwm_channels/readme.html#description"
  },"207": {
    "doc": "TCC PWM generation",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/tcc/tcc_synchronous_pwm_channels/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tcc/tcc_synchronous_pwm_channels/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/tcc/tcc_synchronous_pwm_channels/readme.html#downloading-and-building-the-application"
  },"208": {
    "doc": "TCC PWM generation",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tcc/tcc_synchronous_pwm_channels/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/tcc/tcc_synchronous_pwm_channels/readme.html#setting-up-the-hardware"
  },"209": {
    "doc": "TCC PWM generation",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | Observe the high-side and low-side PWM waveforms on oscilloscope | Observe the dead time between the high side and the low side | Observe the pwm frequency to be 10 KHz | . PIC32CM MC00 Curiosity Pro Evaluation Kit pin details: . | Signal Name | Pad | Pin | . | ch0-PWMH | PA08 | Pin 3 of EXT2 connector | . | ch0-PWML | PB10 | Pin 7 of EXT1 connector | . | ch1-PWMH | PA09 | Pin 4 of EXT2 connector | . | ch1-PWML | PB11 | Pin 8 of EXT1 connector | . | ch2-PWMH | PA10 | Pin 5 of EXT2 connector | . | ch2-PWML | PA16 | Pin 17 of EXT2 connector | . |   |   |   | . PIC32CM MC00 Curiosity Pro Evaluation Kit waveforms: . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tcc/tcc_synchronous_pwm_channels/readme.html#running-the-application",
    "relUrl": "/apps/tcc/tcc_synchronous_pwm_channels/readme.html#running-the-application"
  },"210": {
    "doc": "TCC PWM generation",
    "title": "TCC PWM generation",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/tcc/tcc_synchronous_pwm_channels/readme.html",
    "relUrl": "/apps/tcc/tcc_synchronous_pwm_channels/readme.html"
  },"211": {
    "doc": "WDT timeout",
    "title": "WDT timeout",
    "content": "This example shows how to generate a Watchdog timer reset by emulating a deadlock. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/wdt/wdt_timeout/readme.html#wdt-timeout",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#wdt-timeout"
  },"212": {
    "doc": "WDT timeout",
    "title": "Description",
    "content": "This example application shows how the WDT peripheral library resets the watchdog timer by not feeding the watchdog on switch press. The application sets up the watchdog to reset the device. The application also sets up the timer to blink an LED to emulate a process. A user switch press forces the device to wait in an infinite loop to emulate a deadlock. As a result a device reset is triggered as the watchdog counter overflows the bounded value. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/wdt/wdt_timeout/readme.html#description",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#description"
  },"213": {
    "doc": "WDT timeout",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/wdt/wdt_timeout/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/wdt/wdt_timeout/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#downloading-and-building-the-application"
  },"214": {
    "doc": "WDT timeout",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/wdt/wdt_timeout/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#setting-up-the-hardware"
  },"215": {
    "doc": "WDT timeout",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application project using its IDE | LED should be blinking and the console displays the following message . | Press the switch to put the system in a deadlock | LED should stop blinking and the console should print the following message . | WDT will reset the device in four seconds and the demonstration should restart | Once the demo is completed, do a power on reset to ensure WDT can be disabled for next program. | . Refer the table below for details of switch and LED: . | Board | Switch Name | LED Name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | SW0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/wdt/wdt_timeout/readme.html#running-the-application",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html#running-the-application"
  },"216": {
    "doc": "WDT timeout",
    "title": "WDT timeout",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/wdt/wdt_timeout/readme.html",
    "relUrl": "/apps/wdt/wdt_timeout/readme.html"
  },"217": {
    "doc": "AC Sleepwalking",
    "title": "AC Sleepwalking",
    "content": "This example application shows how to use the AC Peripheral library to perform a single shot comparison in standby sleep mode periodically and wake up the device at the end of a successful comparison. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_sleepwalk_singleshot/readme.html#ac-sleepwalking",
    "relUrl": "/apps/ac/ac_sleepwalk_singleshot/readme.html#ac-sleepwalking"
  },"218": {
    "doc": "AC Sleepwalking",
    "title": "Description",
    "content": "Single shot conversion is triggered by RTC compare event. Generation of a trigger and compare operation are done while the CPU is in the standby sleep mode. AC generates the interrupt on the end of the comparison which wakes the CPU. ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_sleepwalk_singleshot/readme.html#description",
    "relUrl": "/apps/ac/ac_sleepwalk_singleshot/readme.html#description"
  },"219": {
    "doc": "AC Sleepwalking",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/ac/ac_sleepwalk_singleshot/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | pic32cm_mc00_curiosity_pro.X | MPLABX project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_sleepwalk_singleshot/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/ac/ac_sleepwalk_singleshot/readme.html#downloading-and-building-the-application"
  },"220": {
    "doc": "AC Sleepwalking",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | pic32cm_mc00_curiosity_pro.X | PIC32CM MC00 Curiosity Pro Evaluation Kit | . |   |   | . Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit . | Connect a voltage below VDD to pin A2 of the J803 header | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_sleepwalk_singleshot/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/ac/ac_sleepwalk_singleshot/readme.html#setting-up-the-hardware"
  },"221": {
    "doc": "AC Sleepwalking",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Observe output message in console as follows: . | Console displays the message stating whether voltage at AC input is lower or greater than the internal bandgap voltage (1.1 V) | LED toggles when comparison is done | . Below table shows the AC input pin and LED name for the board . | Board | AC input pin | LED name | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | pin 2 (A2) of the J803 header) | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_sleepwalk_singleshot/readme.html#running-the-application",
    "relUrl": "/apps/ac/ac_sleepwalk_singleshot/readme.html#running-the-application"
  },"222": {
    "doc": "AC Sleepwalking",
    "title": "AC Sleepwalking",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/apps/ac/ac_sleepwalk_singleshot/readme.html",
    "relUrl": "/apps/ac/ac_sleepwalk_singleshot/readme.html"
  },"223": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"224": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for PIC32CM MC00 family  v3.0.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLABx applications | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | 37 | . New Features . New features added in this release are as follows: . | Applications migrated from csp repository to this new application repository for PIC32CM MC00 development boards | . Known Issues . The current known issues are as follows: . | The following product family requires newer DFP version to be downloaded from packs server and to be used in the MPLAB project to build with MPLAB X IDE v5.4. | PIC32CM MC00 Family: PIC32CM-MC_DFP v1.0.32 | . | . Development Tools . | MPLAB® X IDE v5.40 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.6.0 | . | MPLAB® XC32 C/C++ Compiler v2.41 | . ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/release_notes.html#harmony-3-peripheral-library-application-examples-for-pic32cm-mc00-family--v300",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-pic32cm-mc00-family--v300"
  },"225": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/release_notes.html",
    "relUrl": "/release_notes.html"
  },"226": {
    "doc": "Harmony 3 peripheral library application examples for PIC32CM MC00 family",
    "title": "Harmony 3 peripheral library application examples for PIC32CM MC00 family",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 peripheral library application examples for PIC32CM MC00 family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 peripheral library application examples for PIC32CM MC00 family - [Release Notes](/csp_apps_pic32cm_mc00/release_notes.html) - [MPLAB® Harmony License](/csp_apps_pic32cm_mc00/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). ## Contents Summary | Folder | Description | --- | --- | apps | Contains peripheral library example applications | docs | Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine). Use [github pages](https://microchip-mplab-harmony.github.io/csp_apps_pic32cm_mc00/) of this repository for viewing it online. | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries. | Name | Description | ---- | ----------- | [AC Sleepwalking](/csp_apps_pic32cm_mc00/apps/ac/ac_sleepwalk_singleshot/readme.html) | This example application shows how to use the AC Peripheral library to perform a single shot comparison in standby sleep mode periodically and wake up the device at the end of a successful comparison | [AC PWM generation](/csp_apps_pic32cm_mc00/apps/ac/ac_wav_gen/readme.html) | This example application shows how to use the Analog Comparator Peripheral library to generate a 1KHz PWM waveform | [ADC DMA sleepwalking](/csp_apps_pic32cm_mc00/apps/adc/adc_dmac_sleepwalking/readme.html) | This application shows how to configure the ADC in a sleepwalking operation, where the input voltage is measured at a fixed interval, and then the device is woken from sleep after conversion of 16 samples | [ADC Sample](/csp_apps_pic32cm_mc00/apps/adc/adc_sample/readme.html) | This example application shows how to sample an analog input using the ADC and displays the converted samples on a serial terminal | [ADC window sleepwalking](/csp_apps_pic32cm_mc00/apps/adc/adc_window_sleepwalking/readme.html) | This application shows how to configure ADC in a sleepwalking operation, where input voltage is measured at a fixed interval, but device is not woken from sleep until the measured value is below a given threshold | [CCL Manchester Encoder](/csp_apps_pic32cm_mc00/apps/ccl/manchester_encoder/readme.html) | This example application shows how to use the CCL peripheral library and generate a Manchester-encoded output | [Clock configuration](/csp_apps_pic32cm_mc00/apps/clock/clock_config/readme.html) | This example application shows how to configure the clock system to run the device at maximum frequency. It also outputs a prescaled clock signal on a GPIO pin for measurement and verification | [DAC waveform generation](/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen/readme.html) | This example application shows how to use the DAC to generate a 1 KHz Sine or Sawtooth wave with a lookup table | [DAC waveform generation with DMA](/csp_apps_pic32cm_mc00/apps/dac/dac_wav_gen_dma/readme.html) | This example application shows how to use the DAC with the DMA to generate a 5 KHz sinusoidal waveform without CPU intervention | [DIVAS accelerate computations](/csp_apps_pic32cm_mc00/apps/divas/divas_accelerate_computations/readme.html) | This example application demonstrates how to use the DIVAS accelerator to compute square root, and perform a division and modulus operation | [DIVAS override C division operator](/csp_apps_pic32cm_mc00/apps/divas/divas_c_operator_override/readme.html) | This example application demonstrates how to override C division operator and modulus operator to use the DIVAS accelerator | [DMAC memory transfer](/csp_apps_pic32cm_mc00/apps/dmac/dmac_memory_transfer/readme.html) | This example application demonstrates how to use the DMAC peripheral to do a memory to memory transfer | [DMAC USART echo](/csp_apps_pic32cm_mc00/apps/dmac/dmac_usart_echo/readme.html) | This example application demonstrates USART transfer with DMA to receive 10 bytes and echo back the received bytes | [DSU compute CRC32](/csp_apps_pic32cm_mc00/apps/dsu/dsu_crc32_generate/readme.html) | This example application demonstrates how to use the DSU Peripheral library to compute 32-bit Cyclic Redundancy Checksum (CRC) | [EIC Interrupt](/csp_apps_pic32cm_mc00/apps/eic/eic_led_on_off/readme.html) | This example application demonstrates how to generate interrupt using the EIC on switch press and indicate it through an LED | [EVSYS trigger](/csp_apps_pic32cm_mc00/apps/evsys/evsys_trigger/readme.html) | This example application demonstrates how to use the EVSYS Peripheral library to setup autonomous, low-latency and configurable communication between peripherals | [FREQM measurement](/csp_apps_pic32cm_mc00/apps/freqm/freqm_measure_clock_freq/readme.html) | This example application demonstrates how to use the FREQM peripheral to measure the frequency of the internal RC Oscillator | [NVMCTRL data flash](/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_data_flash/readme.html) | This example application demonstrates code execution from the main Flash memory while performing erase operation in data flash section | [NVMCTRL read write](/csp_apps_pic32cm_mc00/apps/nvmctrl/nvmctrl_flash_read_write/readme.html) | This example application demonstrates how to use the NVMCTRL to erase and program the internal Flash memory | [PM wakeup using EIC](/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_eic/readme.html) | This application demonstrates entering the low power modes and exiting it using the EIC | [PM wakeup using RTC](/csp_apps_pic32cm_mc00/apps/pm/pm_wakeup_rtc/readme.html) | This example demonstrates entering the low power modes and exiting it using the RTC | [PORT polling](/csp_apps_pic32cm_mc00/apps/port/port_led_on_off_polling/readme.html) | This example application demonstrate how to poll the switch input, and indicate the switch status using the LED | [RSTC reset cause](/csp_apps_pic32cm_mc00/apps/rstc/rstc_reset_cause/readme.html) | This example shows how to use the RSTC peripheral to indicate the cause of the device reset | [RTC alarm interrupt](/csp_apps_pic32cm_mc00/apps/rtc/rtc_alarm/readme.html) | This example shows how to use the RTC to configure the time and generate the alarm | [RTC periodic interrupt](/csp_apps_pic32cm_mc00/apps/rtc/rtc_periodic_timeout/readme.html) | This example application shows how to use the RTC to generate periodic interrupts | [SDADC Sample](/csp_apps_pic32cm_mc00/apps/sdadc/sdadc_sample/readme.html) | This example application shows how to sample an analog input using SDADC and displays the converted samples on a serial terminal | [SERCOM I2C EEPROM read write](/csp_apps_pic32cm_mc00/apps/sercom/i2c/master/i2c_eeprom/readme.html) | This example application demonstrates how to use the SERCOM peripheral to write and read from the I2C serial EEPROM memory | [SERCOM I2C EEPROM emulation (I2C slave)](/csp_apps_pic32cm_mc00/apps/sercom/i2c/slave/i2c_eeprom_emulation/readme.html) | This example application demonstrates how to use the SERCOM peripheral in slave mode | [SERCOM SPI EEPROM read write](/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_eeprom_write_read/readme.html) | This example application demonstrates how to use the SERCOM SPI peripheral to write and read from the SPI serial EEPROM memory | [SERCOM SPI interrupt](/csp_apps_pic32cm_mc00/apps/sercom/spi/spi_self_loopback_interrupt/readme.html) | This example application shows how to use SERCOM SPI PLIB with external loop back to write and then read back an array of data in interrupt mode | [SERCOM USART interrupt](/csp_apps_pic32cm_mc00/apps/sercom/usart/usart_echo_interrupt/readme.html) | This example application demonstrates how to use the SERCOM peripheral in USART mode to transfer data in a non-blocking manner | [Systick periodic interrupt](/csp_apps_pic32cm_mc00/apps/systick/systick_periodic_timeout/readme.html) | This example shows how to use the SysTick to generate periodic interrupts | [TC capture mode](/csp_apps_pic32cm_mc00/apps/tc/tc_capture_mode/readme.html) | This example shows how to use the TC module in capture mode to measure duty cycle and frequency of an external input | [TC compare mode](/csp_apps_pic32cm_mc00/apps/tc/tc_compare_mode/readme.html) | This example shows how to use the TC module in compare mode to generate an active low, active high, and toggle output on compare match | [TC timer mode](/csp_apps_pic32cm_mc00/apps/tc/tc_timer_mode/readme.html) | This example shows how to use the TC module in timer mode to generate periodic interrupt | [TCC PWM generation](/csp_apps_pic32cm_mc00/apps/tcc/tcc_synchronous_pwm_channels/readme.html) | This example application shows how to use the TCC to generate a 2 or 3 phase PWM signals for motor control with dead time | [WDT timeout](/csp_apps_pic32cm_mc00/apps/wdt/wdt_timeout/readme.html) | This example shows how to generate a Watchdog timer reset by emulating a deadlock | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00.svg)](https://github.com/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/csp_apps_pic32cm_mc00.svg?style=social)]() ",
    "url": "http://localhost:4000/csp_apps_pic32cm_mc00/",
    "relUrl": "/"
  }
}
